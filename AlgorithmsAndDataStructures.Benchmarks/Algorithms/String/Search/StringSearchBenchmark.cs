using AlgorithmsAndDataStructures.Algorithms.Strings.Search;
using BenchmarkDotNet.Attributes;

namespace AlgorithmsAndDataStructures.Benchmarks.Algorithms.String.Search;

[HtmlExporter]
[RPlotExporter]
[CsvMeasurementsExporter]
[MarkdownExporterAttribute.GitHub]
public class StringSearchBenchmark
{
    private readonly BooyerMooreCombinedHeuristic booyerMooreCombinedHeuristic;
    private readonly BoyerMooreBadCharacterHeuristic boyerMooreBadCharacterHeuristic;
    private readonly BoyerMooreGoodSuffixHeuristic boyerMooreGoodSuffixHeuristic;

    private readonly (string, string)[] data =
    {
        ("ABC ABCDAB ABCDABCDABD", "ABCDABCD"),
        (
            "",
            "zkDAK5ZWhb5akxvSjuUOEdlBvmILA")
    };

    private readonly KnuthMorrisPratt knuthMorrisPratt;
    private readonly NaivePatternSearch naivePatternSearch;
    private readonly RabinKarp rabinKarp;
    private readonly RecursivePatternSearch recursivePatternSearch;

    public StringSearchBenchmark()
    {
        booyerMooreCombinedHeuristic = new BooyerMooreCombinedHeuristic();
        boyerMooreBadCharacterHeuristic = new BoyerMooreBadCharacterHeuristic();
        boyerMooreGoodSuffixHeuristic = new BoyerMooreGoodSuffixHeuristic();
        knuthMorrisPratt = new KnuthMorrisPratt();
        naivePatternSearch = new NaivePatternSearch();
        rabinKarp = new RabinKarp();
        recursivePatternSearch = new RecursivePatternSearch();
    }

    [Params(0, 1)] public int DataIndex { get; set; }

    [Benchmark(Baseline = true)]
    public int NaivePatternSearch()
    {
        return naivePatternSearch.Search(data[DataIndex].Item1, data[DataIndex].Item2);
    }

    [Benchmark]
    public int BooyerMooreCombinedHeuristic()
    {
        return booyerMooreCombinedHeuristic.Search(data[DataIndex].Item1, data[DataIndex].Item2);
    }

    [Benchmark]
    public int BoyerMooreBadCharacterHeuristic()
    {
        return boyerMooreBadCharacterHeuristic.Search(data[DataIndex].Item1, data[DataIndex].Item2);
    }

    [Benchmark]
    public int BoyerMooreGoodSuffixHeuristic()
    {
        return boyerMooreGoodSuffixHeuristic.Search(data[DataIndex].Item1, data[DataIndex].Item2);
    }

    [Benchmark]
    public int KnuthMorrisPratt()
    {
        return knuthMorrisPratt.Search(data[DataIndex].Item1, data[DataIndex].Item2);
    }

    [Benchmark]
    public int RabinKarp()
    {
        return rabinKarp.Search(data[DataIndex].Item1, data[DataIndex].Item2);
    }

    [Benchmark]
    public int RecursivePatternSearch()
    {
        return recursivePatternSearch.Search(data[DataIndex].Item1, data[DataIndex].Item2);
    }
}